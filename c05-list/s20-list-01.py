# 리스트 자료형
# 리스트 = [...]
# 여러 데이터를 목록 형태로 관리
# 다양한 자료형을 넣을 수 있다.
"""
리스트명 = [값1, 값2, ...]
"""

#%%
# 빈 리스트
a = []
print(type(a), a) # <class 'list'> []


#%%

# 빈 리스트
x = list()
print(type(x), x) # <class 'list'> []

#%%

# 문자열을 각 문자로 분리해서 리스트로 생성
y = list('abcd')
print(type(y), len(y), y) # <class 'list'> ['a', 'b', 'c', 'd']

#%%

# 문자열 전체가 하나의 요소로서 리스트로 생성
z = ['abcd']
print(type(z), len(z), z) # <class 'list'> 1 ['abcd']


#%%

# 배열 형태를 가지고 있지만 배열을 아니다.
# 배열: 동일한 자료형을 가져야 한다.
b = [1, 2, 3]
c = ['a', 'b', 'c', 'd']
d = [1.0, 2.0, 3.14]

# 리스트의 길이는 요소의 갯수
print(f"길이: {len(b)} : {b}")
print(f"길이: {len(c)} : {c}")
print(f"길이: {len(d)} : {d}")

#%%

# 다양한 자료형을 가질 수 있다.
e = ["홍길동", 34, False, 3.14]
print(f"길이: {len(e)} : {e}") # 4

#%%

# 리스트 안에 또 다른 리스트를 가질 수 있다.
ll = [1, 3, 5, [7, 9], e]
print(f"길이: {len(ll)} : {ll}") 
# 길이: 5 : [1, 3, 5, [7, 9], ['홍길동', 34, False, 3.14]] 

#%%

# 참조
print(ll[0]) # 1
print(ll[1]) # 3
print(ll[2]) # 5
print(ll[3]) # [7,9]
print(ll[4]) # ['홍길동', 34, False, 3.14]

#%%

l3 = ll[3]
l4 = ll[4]
print(f"길이: {len(l3)} : {l3}") # 길이: 2 : [7, 9]
print(f"길이: {len(l4)} : {l4}") # 길이: 3 : ['홍길동', 34, False, 3.14]

#%%

print(f"참조: {ll[3][0]}, {ll[3][1]}") # 7, 9
print(f"False: {ll[4][2]}, {l4[2]}")   # False: False, False

#%%
# 직접 수정 : False 값이 있는 위치의 값이 변경 됨
ll[4][2] = '한양'
print('수정:', ll) # 수정:  [1, 3, 5, [7, 9], ['홍길동', 34, '한양', 3.14]]

#%%

# 참조 변수에서 원본의 변수의 값을 수정할 수 있다.
l4[0] = '전우치'
print('참조수정:', ll) # 참조수정: [1, 3, 5, [7, 9], ['전우치', 34, '한양', 3.14]]






